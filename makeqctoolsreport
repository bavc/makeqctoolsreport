#/bin/bash
# qctools reporter
# this bash script accepts one or many video file inputs and produces
# sidecar QCTools xml.gz report file for each input

# to get support for multiple audio tracks you must use an ffmpeg that includes http://git.videolan.org/?p=ffmpeg.git;a=commit;h=09ec31ce3aab41407965e7a95b7d145702434c26, presumably FFmpeg 2.6.4 or later.

get_videostreamcount(){
    VIDEOSTREAMCOUNT=$(ffprobe "${1}" -select_streams v -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
}
get_audiostreamcount(){
    AUDIOSTREAMCOUNT=$(ffprobe "${1}" -select_streams a -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
}

usage(){
    echo
    echo "$(basename "${0}") ${version}"
    echo "This application will use FFprobe to create a QCTools report in gzipped xml format."
    echo "Dependencies: ffprobe"
    echo "Usage: $(basename "${0}") [ -0 | -1 | -A ] file1 [ file2 ...]"
    echo "  -0 (do not assess any audio tracks)"
    echo "  -1 (only assess the first audio track [default])"
    echo "  -A (assess all audio tracks)"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
AUDIOTRACKOPT="1"
while getopts ":01Ah" opt ; do
    case "${opt}" in
        0) AUDIOTRACKOPT="0" ;;
        1) AUDIOTRACKOPT="1" ;;
        A) AUDIOTRACKOPT="A" ;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    unset audiofilterseperator
    unset moviefiltermap
    unset moviefilteroutput
    unset ebur128filters
    file="${1}"
    get_videostreamcount "${file}"
    get_audiostreamcount "${file}"
    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        moviefiltermap=":s=v"
        moviefilteroutput="[v0]"
        if [[ "${AUDIOSTREAMCOUNT}" > 0 && "${AUDIOTRACKOPT}" = "A" ]] ; then
            for (( c=1; c<=${AUDIOSTREAMCOUNT}; c++ )) ; do
                moviefiltermap+="+a"
                moviefilteroutput+="[ai${c}]"
                ebur128filters+=";[ai${c}]ebur128=metadata=1[out${c}]"
            done
        elif [[ "${AUDIOSTREAMCOUNT}" > 0 && "${AUDIOTRACKOPT}" = "1" ]] ; then
            moviefiltermap+="+a"
            moviefilteroutput+="[ai1]"
            ebur128filters+=";[ai1]ebur128=metadata=1[out1]"
        fi
        echo -n "processing $(basename "${file}")..."
        ffprobe -loglevel error -f lavfi \
        -i "movie=${file}${moviefiltermap}${moviefilteroutput},\
        [v0]signalstats=stat=tout+vrep+brng,\
        cropdetect=reset=1,split[a][b];\
        [a]field=top[a1];\
        [b]field=bottom[b1],[a1][b1]psnr[out0]\
        ${ebur128filters}" \
        -show_frames \
        -show_versions \
        -of xml=x=1:q=1 \
        -noprivate | gzip > "${file}.qctools.xml.gz"
        echo " done. Output is at ${file}.qctools.xml.gz"
    else
        echo "Error: $(basename '"${file}"' does not appear to have a video track, skipping.)"
    fi
    shift
done
